

def rewire_Graph(data): # connects the neighbors of a bridge node to the other bridge node
    """Original bridge-based rewiring function"""
    import networkx as nx
    from torch_geometric.utils import to_networkx
    
    logging.info("Starting bridge-based rewiring...")
    g6 = to_networkx(data, to_undirected=True)
    # create graph with the data
    bridges = list(nx.bridges(g6)) # get list of bridges 
    if not bridges: # handle no bridge case
        logging.info("No bridges found in the graph.")
        edge_index = torch.tensor(list(g6.edges), dtype=torch.long).t().contiguous()
        return edge_index

    filtered_bridges = [] # get only bridges, not the pendants (u,v) --> bridge exists b/w node u and v
    for u, v in bridges:
        if len(list(nx.neighbors(g6, u))) > 1 and len(list(nx.neighbors(g6, v))) > 1:
            filtered_bridges.append((u, v))

    if not filtered_bridges: 
        logging.info("No suitable bridges found for rewiring.")
        edge_index = torch.tensor(list(g6.edges), dtype=torch.long).t().contiguous()
        return edge_index

    adj_node_dict = {}
    for u, v in filtered_bridges:
        for node in (u, v):
            neighbors = list(nx.neighbors(g6, node))
            if len(neighbors) > 1:
                adj_node_dict[node] = [n for n in neighbors if n not in (u, v)]

    for u, v in filtered_bridges:
        for nu in adj_node_dict.get(u, []):
            if nu != v and not g6.has_edge(nu, v):
                g6.add_edge(nu, v)
        for nv in adj_node_dict.get(v, []):
            if nv != u and not g6.has_edge(nv, u):
                g6.add_edge(nv, u)

    edge_index = torch.tensor(list(g6.edges), dtype=torch.long).t().contiguous()
    
    logging.info("Bridge rewiring complete. New edge count: %d", edge_index.size(1))
    return edge_index

def find_local_bridges(G):
    """
    Find local bridges - edges whose removal increases shortest path length.
    Improved version for unweighted graphs.
    """
    import networkx as nx
    
    def is_local_bridge(u, v):
        """Check if edge (u,v) is a local bridge."""
        # Remove edge temporarily
        #G.remove_edge(u, v)
        G_copy = G.copy() # uses a copy * *
        G_copy.remove_edge(u, v)
        
        # Check connectivity and path length
        try:
            new_shortest_path = nx.shortest_path_length(G_copy, u, v)
            # For unweighted graphs, any increase from 1 is significant
            is_bridge = new_shortest_path > 1
        except nx.NetworkXNoPath:
            # If no path exists after removal, it's definitely a bridge
            is_bridge = True
        
        # Restore edge
        #G.add_edge(u, v)
        
        return is_bridge
    
    local_bridges = []
    
    # Check each edge
    for u, v in list(G.edges()):
        if is_local_bridge(u, v):
            local_bridges.append((u, v))
    
    return local_bridges
    
def rewire_Graph_local_bridges(data, top_n=None):
    """
    Rewire graph by connecting neighbors through local bridges.
    
    Args:
        data: PyTorch Geometric data object
        top_n: Number of local bridges to rewire (None for all)
    
    Returns:
        torch.Tensor: New edge index with rewired connections
    """
    import networkx as nx
    from torch_geometric.utils import to_networkx
    
    logging.info("Starting local bridges-based rewiring...")
    
    # Convert to NetworkX for analysis
    g = to_networkx(data, to_undirected=True)
    original_edge_count = g.number_of_edges()
    logging.info("Original edge count: %d", original_edge_count)
    
    # Find local bridges
    local_bridges = find_local_bridges(g)
    logging.info("Local bridges found: %d", len(local_bridges))
    
    # Select subset if top_n is specified
    if top_n is not None and len(local_bridges) > top_n:
        # You could add scoring here (e.g., by edge betweenness)
        # For now, just take the first top_n
        local_bridges = local_bridges[:top_n]
        logging.info("Using top %d local bridges for rewiring", top_n) #------------> why top-n?
    
    if not local_bridges:
        logging.warning("No local bridges found. Returning original graph.")
        edge_index = torch.tensor(list(g.edges), dtype=torch.long).t().contiguous()
        return edge_index
    
    logging.info("Local bridges to rewire: %s", local_bridges)
    
    # Create adjacency dictionary for neighbors (excluding the local bridge endpoints)
    adj_node_dict = {}
    for u, v in local_bridges:
        for node in (u, v):
            neighbors = list(nx.neighbors(g, node))
            if len(neighbors) > 1:
                adj_node_dict[node] = [n for n in neighbors if n not in (u, v)]
    
    # Add rewiring edges: connect neighbors of local bridge endpoints
    new_edges_added = 0
    for u, v in local_bridges:
        # Connect neighbors of u to v
        for nu in adj_node_dict.get(u, []):
            if nu != v and not g.has_edge(nu, v):
                g.add_edge(nu, v)
                new_edges_added += 1
        
        # Connect neighbors of v to u  
        for nv in adj_node_dict.get(v, []):
            if nv != u and not g.has_edge(nv, u):
                g.add_edge(nv, u)
                new_edges_added += 1
    
    # Convert back to edge index format
    edge_index = torch.tensor(list(g.edges), dtype=torch.long).t().contiguous()
    logging.info("Local bridges rewiring complete. New edge count: %d, Added: %d", 
                edge_index.size(1), new_edges_added)
    
    return edge_index

def rewire_Graph_betweenness(data, top_n=2):
    """
    Rewire graph by connecting neighbors through high betweenness centrality edges.
    
    Args:
        data: PyTorch Geometric data object
        top_n: Number of highest betweenness edges to rewire
    
    Returns:
        torch.Tensor: New edge index with rewired connections
    """
    import networkx as nx
    from torch_geometric.utils import to_networkx
    
    logging.info("Starting betweenness-based rewiring...")
    
    # Convert to NetworkX for analysis
    g = to_networkx(data, to_undirected=True)
    original_edge_count = g.number_of_edges()
    logging.info("Original edge count: %d", original_edge_count)
    
    # Calculate edge betweenness centrality
    edge_betweenness = nx.edge_betweenness_centrality(g)
    
    # Get top_n edges with highest betweenness centrality
    sorted_edges = sorted(edge_betweenness.items(), key=lambda x: x[1], reverse=True)
    high_betweenness_edges = [edge for edge, _ in sorted_edges[:top_n]]
    
    logging.info("High betweenness edges identified: %s", high_betweenness_edges)
    
    # Create adjacency dictionary for neighbors (excluding the high betweenness edge endpoints)
    adj_node_dict = {}
    for u, v in high_betweenness_edges:
        for node in (u, v):
            neighbors = list(nx.neighbors(g, node))
            if len(neighbors) > 1:
                adj_node_dict[node] = [n for n in neighbors if n not in (u, v)]
    
    # Add rewiring edges: connect neighbors of high betweenness edge endpoints
    for u, v in high_betweenness_edges:
        # Connect neighbors of u to v
        for nu in adj_node_dict.get(u, []):
            if nu != v and not g.has_edge(nu, v):
                g.add_edge(nu, v)
        
        # Connect neighbors of v to u  
        for nv in adj_node_dict.get(v, []):
            if nv != u and not g.has_edge(nv, u):
                g.add_edge(nv, u)
    
    # Convert back to edge index format
    edge_index = torch.tensor(list(g.edges), dtype=torch.long).t().contiguous()
    logging.info("Betweenness rewiring complete. New edge count: %d", edge_index.size(1))
    
    return edge_index

# Update the argument parser to include new rewiring strategies

def apply_rewiring_strategy(data, strategy='bridges', top_n=2):
    """Apply different rewiring strategies"""
    if strategy == 'bridges':
        return rewire_Graph(data)
    elif strategy == 'betweenness':
        return rewire_Graph_betweenness(data, top_n=top_n)
    elif strategy == 'local_bridges':
        return rewire_Graph_local_bridges(data, top_n=top_n)
    else:
        logging.warning("Unknown rewiring strategy: %s. Using original graph.", strategy)
        return data.edge_index
